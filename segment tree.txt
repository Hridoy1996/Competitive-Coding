int a[4*N];
struct t
{
    int cnt[3];
    int prop=0;
}
tree[4*N];
 
void build(int node, int L, int R)
{
    if(L==R)
    {
        tree[node].cnt[a[L]%3]++;
        return;
    }
    int M=(L+R)/2;
    build(node*2, L, M);
    build(node*2+1, M+1, R);
    tree[node].cnt[0]=(tree[node*2].cnt[0] + tree[node*2+1].cnt[0]);
    tree[node].cnt[1]=(tree[node*2].cnt[1] + tree[node*2+1].cnt[1]);
    tree[node].cnt[2]=(tree[node*2].cnt[2] + tree[node*2+1].cnt[2]);
}
int query(int node, int L, int R, int i, int j, int carry = 0)
{
    if (i > R || j < L)
        return 0;
 
    if (L >= i and R <= j)
    {
 
        return  tree[node].cnt[(3-carry)%3];
 
 
    }
    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (L + R) >> 1;
 
    int p1 = query(Left, L, mid, i, j, ( carry + tree[node].prop ) %3);
    int p2 = query(Right, mid + 1, R, i, j, ( carry + tree[node].prop ) %3);
 
    return p1 + p2;
}
 
void update(int node, int L, int R, int i,int j, int x)
{
    if(i>R || j<L)
        return;
    if(L>=i and R<=j)
    {
        int z= tree[node].cnt[0];
        int o= tree[node].cnt[1];
        int t= tree[node].cnt[2];
 
 
        tree[node].cnt[1]=z;
        tree[node].cnt[2]=o;
        tree[node].cnt[0]=t;
        tree[node].prop=(tree[node].prop + x)%3;
        return ;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (L + R) / 2;
    update(Left, L, mid, i, j, x);
    update(Right, mid + 1, R, i, j, x);
    int pro=tree[node].prop%3;
    tree[node].cnt[0] = tree[Left].cnt[0] + tree[Right].cnt[0];
    tree[node].cnt[1] = tree[Left].cnt[1] + tree[Right].cnt[1];
    tree[node].cnt[2] = tree[Left].cnt[2] + tree[Right].cnt[2];
    int ara[3]= {tree[node].cnt[0],tree[node].cnt[1], tree[node].cnt[2]};
 
    int z= tree[node].cnt[0];
    int o= tree[node].cnt[1];
    int t= tree[node].cnt[2];
 
    if(pro==1)
    {
        tree[node].cnt[1]=z;
        tree[node].cnt[2]=o;
        tree[node].cnt[0]=t;
    }
    else if(pro==2)
    {
 
        tree[node].cnt[1]=t;
        tree[node].cnt[2]=z;
        tree[node].cnt[0]=o;
 
    }
 
}