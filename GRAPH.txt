
//DFS - Cycle Detection in Directed Graph.cpp

bool findLoop(int v) 
{
	if(vis[v]==1)
		return 1;
	if(vis[v]==2)
		return 0;
	vis[v]=1;
	for(auto &it:g[v])
	{
		if(findLoop(it))
			return 1;
	}
	vis[v]=2;
	return 0;
}

bool checkLoop()
{
	fill(vis+1, vis+n+1, 0);
	for(int i=1;i<=n;i++)
	{
		if(!vis[i] && findLoop(i))
			return 1;
	}
	return 0;
}
//disjoint set union
void init()
{
	for(int i=1;i<=n;i++)
	{
		root[i]=i;
		sz[i]=1;
	}
	connected=n;
}

int rt(int k)
{
	while(k!=root[k])
	{
		root[k]=root[root[k]];
		k=root[k];
	}
	return k;
}

void merge(int u, int v)
{
	int rt1=rt(u);
	int rt2=rt(v);

	if(rt1==rt2)
		return;

	connected--;

	if(sz[rt1]>sz[rt2])
		swap(rt1, rt2);

	sz[rt2]+=sz[rt1];
	sz[rt1]=0;
	root[rt1]=root[rt2];
}
//stringly connected component
vector<int> g[N], newg[N], rg[N], todo;
int comp[N], indeg[N]; 
bool vis[N];
vector<int> gr[N];

void dfs(int k)
{
	vis[k]=1;
	for(auto it:g[k])
	{
		if(!vis[it])
			dfs(it);
	}
	todo.push_back(k);
}

void dfs2(int k, int val)
{
	comp[k]=val;
	for(auto it:rg[k])
	{
		if(comp[it]==-1)
			dfs2(it, val);
	}
}

void sccAddEdge(int from, int to)
{
	g[from].push_back(to);
	rg[to].push_back(from);
}

void scc()
{
	for(int i=1;i<=n;i++)
		comp[i]=-1;

	for(int i=1;i<=n;i++)
	{
		if(!vis[i])
			dfs(i);
	}

	reverse(todo.begin(), todo.end());

	for(auto it:todo)
	{
		if(comp[it]==-1)
		{
			dfs2(it, ++grp);
		}
	}
}
//top short
int indeg[N];
vector<int> topo; //Stores lexicographically smallest toposort
vector<int> g[N];

bool toposort() //Returns 1 if there exists a toposort, 0 if there is a cycle
{	
	priority_queue<int, vector<int>, greater<int> > pq;
	for(int i=1;i<=n;i++)
		for(auto &it:g[i])
			indeg[it]++;
	for(int i=1;i<=n;i++)
	{
		if(!indeg[i])
			pq.push(i);
	}
	while(!pq.empty())
	{
		int u=pq.top();
		pq.pop();
		topo.push_back(u);
		for(auto &v:g[u])
		{
			indeg[v]--;
			if(!indeg[v])
				pq.push(v);
		}
	}
	if(topo.size()<n)
		return 0;
	return 1;
}
//bipertite_match
#include <bits/stdc++.h>
using namespace std;
typedef int ll;
#define inf 1000000
char arr[310][310];
ll temp1[310][310];
ll temp2[310][310];
ll f;
ll n,m;
vector<ll> g[310000];
ll lt[310000];
ll rt[310000];
bool visited[310000];
bool dfs(ll u)
{
    if(visited[u])
        return false;
    visited[u]=true;
    for(ll i=0; i<g[u].size(); i++)
    {
        ll v=g[u][i];
        if(rt[v]==-1)
        {
            rt[v]=u;
            lt[u]=v;
            return true;
        }
    }
    for(ll i=0; i<g[u].size(); i++)
    {
        ll v=g[u][i];
        if(dfs(rt[v]))
        {
            rt[v]=u;
            lt[u]=v;
            return true;
        }
    }
    return false;
}
ll match(ll n)
{
    memset(lt,-1,sizeof lt);
    memset(rt,-1,sizeof rt);
    bool done=false;
    while(!done)
    {
        done=true;
        memset(visited,false,sizeof visited);
        for(ll i=1; i<=n; i++)
        {
            if(lt[i]==-1 and dfs(i))
            {
                done=false;
            }
        }
    }
    ll ret=0;
    for(ll i=1; i<=n; i++)
        ret+=(int)lt[i]!=-1;
    return ret;
}
int main()
{
    ll ts;
    cin>>ts;
    for(ll t=1; t<=ts; t++)
    {
        ll row,collum;
        cin>>row>>collum;
        for(ll i=0; i<=90010; i++)
            g[i].clear();
        memset(temp1,-1,sizeof temp1);
        memset(temp2,-1,sizeof temp2);
        for(ll i=1; i<=row; i++)
        {
            for(ll j=1; j<=collum; j++)
            {
                cin>>arr[i][j];
            }
        }
        ll val1=1;
        ll val2=1;
        for(ll i=1; i<=row; i++)
        {
            for(ll j=1; j<=collum; j++)
            {
                if(arr[i][j]!='A')
                {
                    if(temp1[i-1][j]==-1)
                    {
                        temp1[i][j]=val1++;
                    }
                    else
                        temp1[i][j]=temp1[i-1][j];
                    if(temp2[i][j-1]==-1)
                    {
                        temp2[i][j]=val2++;
                    }
                    else
                        temp2[i][j]=temp2[i][j-1];
                }
            }
        }
        for(ll i=1; i<=row; i++)
        {
            for(ll j=1; j<=collum; j++)
            {
                if(arr[i][j]!='H')
                    continue;
                ll a=temp1[i][j];
                ll b=temp2[i][j];
                g[a].push_back(b);
            }
        }
        cout<<match(90002)<<endl;
    }

}
