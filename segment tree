#define mx 300005
struct lazySegTree{
    int tree[8*mx],lazy[8*mx];
 
    void init(){
        memset(tree,0,sizeof tree);
        memset(lazy,0,sizeof lazy);
    }
    
    void merge(ll pos, ll l, ll r){
        if(!lazy[pos]) return;
        tree[pos]+=lazy[pos];
        if(l!=r){
            lazy[pos*2]+=lazy[pos];
            lazy[pos*2+1]+=lazy[pos];
        }
        lazy[pos]=0;
    }
 
    void update(ll pos, ll l, ll r, ll L, ll R, ll value){
        merge(pos,l,r);
        if(l>R || r<L || L>R) return;
        if(l>=L && r<=R){
            tree[pos]+=value;
            if(l!=r){
                lazy[pos*2]+=value;
                lazy[pos*2+1]+=value;
            }
            return;
        }
        ll mid=(l+r)/2;
        update(pos*2,l,mid,L,R,value);
        update(pos*2+1,mid+1,r,L,R,value);
        tree[pos]=max(tree[pos*2],tree[pos*2+1]);
    }
 
    int query(ll pos, ll l, ll r, ll L, ll R){
        merge(pos,l,r);
        if(l>R || r<L){
            return 0;
        }
        if(l>=L && r<=R){
            return tree[pos];
        }
        ll mid=(l+r)/2;
        int q1=query(pos*2,l,mid,L,R);
        int q2=query(pos*2+1,mid+1,r,L,R);
        return max(q1,q2);
    }
}seg;
