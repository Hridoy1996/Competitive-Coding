//vag jabe kina
int main()
{
    long long int d , b;
    int  t;
    int j ,len;
    string a ;
    cin>>t;
    for(int i = 1 ; i<=t ; i++){
        cin>>a;
        cin>>b;
        d = 0;
        if (a[0]=='-') j=1;
        else j=0;
        len = a.length();
        for (; j<len; j++) {
 
 
            d = d*10 + (a[j]-'0');
            d = d%b;
        }
    if(  !d){
 
            printf("Case %d: divisible\n",i);
 
        }
        else{
              printf("Case %d: not divisible\n",i);
        }
    }
    return 0;
}
 


string longDivision(string number, int divisor) 
{ 
    // As result can be very large store it in string 
    string ans; 
    
    // Find prefix of number that is larger 
    // than divisor. 
    int idx = 0; 
    int temp = number[idx] - '0'; 
    while (temp < divisor) 
       temp = temp * 10 + (number[++idx] - '0'); 
      
    // Repeatedly divide divisor with temp. After  
    // every division, update temp to include one  
    // more digit. 
    while (number.size() > idx) 
    { 
        // Store result in answer i.e. temp / divisor 
        ans += (temp / divisor) + '0'; 
          
        // Take next digit of number 
        temp = (temp % divisor) * 10 + number[++idx] - '0'; 
    } 
      
    // If divisor is greater than number 
    if (ans.length() == 0) 
        return "0"; 
      
    // else return ans 
    return ans; 
} 
  